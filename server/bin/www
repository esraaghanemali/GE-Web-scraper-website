#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var models = require('../models');
var debug = require('debug')('traffic:server');
var http = require('http');
// var model = require('../middlewares/user')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

models.connect().then(function(){
  models.user.createAdmin();
  models.userPackage.createDefaultUserPackage()
    models.status.createDefaultStatus().catch(function (err) {
        console.log(err)
    })

models.category.createDefaultCategory().catch(function (err) {
    console.log(err)
    models.userPackage.getDefaultUserPackage().then(function(res){
      console.log('res')
console.log(res)
    }).catch(function (err) {
        console.log(err)
    })

})

    models.extractedDataType.createDefaultExtractedDataType().catch(function (err) {
        console.log(err)

    })

// models.user.getUsersGroupedByPackages().then(function (data) {
//
// }).catch(function (err) {
//     console.log(err)
// })
    // console.log(d)
  //   models.model.createModel(
  //     {
  //         modelId:1,
  //         fileName: 'ghassaaaaaaaaaaaan'
  //
  //
  //     }
  // )
// //     // models.userPackage.getPackageById(4)
// models.userPackage.createUserPackage({
//     packageId : 4,
//     packageName:'Default User',
//     maxPagesNumber: 1,
//     maxItemsPerPageNumber: 50
// }).catch(function (err) {
//   console.log(err)
// })
//
//     models.userPackage.updatePackage(4,{
//     packageName:'esraa3',
//     max_pages_number: 1,
//     max_items_per_page_number: 50
// })


   // models.userPackage.getPackageById(4).catch(function (err) {
    //     console.log(err)
    // })
//     models.userPackage.removePackageById(4).catch(function (err) {
//         console.log(err)
//     })
//     models.userPackage.getPackageById(4)

// for(var i =0 ; i<5;i++)
// {
//     models.modelFiles.createModelFile({
//         modelFileId: i,
//         fileName: 'name '+i
//     });
//     console.log("creayed")
// }
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
